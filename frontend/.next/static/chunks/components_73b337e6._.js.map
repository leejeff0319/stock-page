{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Jeff/Developer/stock-page/frontend/components/Card.tsx"],"sourcesContent":["// components/ui/Card.tsx\r\n\r\nimport React from \"react\";\r\n\r\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport const Card: React.FC<CardProps> = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div className={`bg-white border rounded-xl p-4 ${className}`} {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;;;AASlB,MAAM,OAA4B,CAAC,EACxC,QAAQ,EACR,SAAS,EACT,GAAG,OACJ;IACC,qBACE,6LAAC;QAAI,WAAW,CAAC,+BAA+B,EAAE,WAAW;QAAG,GAAG,KAAK;kBACrE;;;;;;AAGP;KAVa","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Jeff/Developer/stock-page/frontend/components/DragWidgets.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  sortableKeyboardCoordinates,\r\n  useSortable,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { useState } from \"react\";\r\nimport { Card } from \"@/components/Card\"; \r\n\r\ntype Widget = {\r\n  id: string;\r\n  content: React.ReactNode;\r\n};\r\n\r\nconst initialWidgets: Widget[] = [\r\n  { id: \"budget\", content: \"Budget Overview\" },\r\n  { id: \"subscriptions\", content: \"Subscriptions\" },\r\n  { id: \"income\", content: \"Income Chart\" },\r\n  { id: \"bills\", content: \"Upcoming Bills\" },\r\n];\r\n\r\nfunction SortableWidget({ id, content }: Widget) {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n  } = useSortable({ id });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n  };\r\n\r\n  return (\r\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\r\n      <Card className=\"p-4 mb-4 shadow-sm cursor-move bg-white\">{content}</Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function DraggableDashboard() {\r\n  const [widgets, setWidgets] = useState(initialWidgets);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter: sortableKeyboardCoordinates,\r\n    })\r\n  );\r\n\r\n  const handleDragEnd = (event: any) => {\r\n    const { active, over } = event;\r\n    if (active.id !== over.id) {\r\n      const oldIndex = widgets.findIndex((w) => w.id === active.id);\r\n      const newIndex = widgets.findIndex((w) => w.id === over.id);\r\n      setWidgets((items) => arrayMove(items, oldIndex, newIndex));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 bg-gray-50 min-h-screen\">\r\n      <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n        <SortableContext items={widgets.map((w) => w.id)} strategy={verticalListSortingStrategy}>\r\n          {widgets.map((widget) => (\r\n            <SortableWidget key={widget.id} {...widget} />\r\n          ))}\r\n        </SortableContext>\r\n      </DndContext>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AAQA;AAOA;AACA;AACA;;;AAnBA;;;;;;AA0BA,MAAM,iBAA2B;IAC/B;QAAE,IAAI;QAAU,SAAS;IAAkB;IAC3C;QAAE,IAAI;QAAiB,SAAS;IAAgB;IAChD;QAAE,IAAI;QAAU,SAAS;IAAe;IACxC;QAAE,IAAI;QAAS,SAAS;IAAiB;CAC1C;AAED,SAAS,eAAe,EAAE,EAAE,EAAE,OAAO,EAAU;;IAC7C,MAAM,EACJ,UAAU,EACV,SAAS,EACT,UAAU,EACV,SAAS,EACT,UAAU,EACX,GAAG,CAAA,GAAA,sKAAA,CAAA,cAAW,AAAD,EAAE;QAAE;IAAG;IAErB,MAAM,QAAQ;QACZ,WAAW,wKAAA,CAAA,MAAG,CAAC,SAAS,CAAC,QAAQ,CAAC;QAClC;IACF;IAEA,qBACE,6LAAC;QAAI,KAAK;QAAY,OAAO;QAAQ,GAAG,UAAU;QAAG,GAAG,SAAS;kBAC/D,cAAA,6LAAC,sHAAA,CAAA,OAAI;YAAC,WAAU;sBAA2C;;;;;;;;;;;AAGjE;GAnBS;;QAOH,sKAAA,CAAA,cAAW;;;KAPR;AAqBM,SAAS;;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,UAAU,CAAA,GAAA,8JAAA,CAAA,aAAU,AAAD,EACvB,CAAA,GAAA,8JAAA,CAAA,YAAS,AAAD,EAAE,8JAAA,CAAA,gBAAa,GACvB,CAAA,GAAA,8JAAA,CAAA,YAAS,AAAD,EAAE,8JAAA,CAAA,iBAAc,EAAE;QACxB,kBAAkB,sKAAA,CAAA,8BAA2B;IAC/C;IAGF,MAAM,gBAAgB,CAAC;QACrB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG;QACzB,IAAI,OAAO,EAAE,KAAK,KAAK,EAAE,EAAE;YACzB,MAAM,WAAW,QAAQ,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,OAAO,EAAE;YAC5D,MAAM,WAAW,QAAQ,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,KAAK,EAAE;YAC1D,WAAW,CAAC,QAAU,CAAA,GAAA,sKAAA,CAAA,YAAS,AAAD,EAAE,OAAO,UAAU;QACnD;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,8JAAA,CAAA,aAAU;YAAC,SAAS;YAAS,oBAAoB,8JAAA,CAAA,gBAAa;YAAE,WAAW;sBAC1E,cAAA,6LAAC,sKAAA,CAAA,kBAAe;gBAAC,OAAO,QAAQ,GAAG,CAAC,CAAC,IAAM,EAAE,EAAE;gBAAG,UAAU,sKAAA,CAAA,8BAA2B;0BACpF,QAAQ,GAAG,CAAC,CAAC,uBACZ,6LAAC;wBAAgC,GAAG,MAAM;uBAArB,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;AAM1C;IA9BwB;;QAGN,8JAAA,CAAA,aAAU;;;MAHJ","debugId":null}}]
}